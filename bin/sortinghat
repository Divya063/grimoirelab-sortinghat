#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2014 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#     Santiago Due√±as <sduenas@bitergia.com>
#

import argparse
import ConfigParser
import os.path
import sys

from sortinghat.cmd import SORTINGHAT_COMMANDS


SORTINGHAT_USAGE_MSG = "Usage: '%(prog)s [options] command"


def main():
    args = parse_args()

    if args.command not in SORTINGHAT_COMMANDS:
        raise RuntimeError("Unknown command %s" % args.command)

    klass = SORTINGHAT_COMMANDS[args.command]

    cmd = klass(user=args.user, password=args.password,
                database=args.database, host=args.host,
                port=args.port)
    cmd.run(*args.cmd_args)


def parse_args():
    # Parse first configuration file parameter
    config_parser = create_config_arguments_parser()
    config_args, args = config_parser.parse_known_args()

    # And then, read default parameters from a configuration file
    if config_args.config_file:
        defaults = read_config_file(config_args.config_file)
    else:
        defaults = {}

    # Parse common arguments using the command parser
    parser = create_common_arguments_parser(defaults)

    # Parse arguments
    return parser.parse_args(args)


def read_config_file(filepath):
    config = ConfigParser.SafeConfigParser()
    config.read(filepath)

    if 'db' in config.sections():
        return dict(config.items('db'))
    else:
        return {}


def create_common_arguments_parser(defaults):
    parser = argparse.ArgumentParser(usage=SORTINGHAT_USAGE_MSG)

    # Database options
    db_group = parser.add_argument_group('Database options')
    db_group.add_argument('-u', '--user', dest='user',
                          help="database user name",
                          default='root')
    db_group.add_argument('-p', '--password', dest='password',
                          help="database user password",
                          default='')
    db_group.add_argument('-d', '--database', dest='database',
                          help="name of the database where fetched projects will be stored")
    db_group.add_argument('--host', dest='host',
                          help="name of the host where the database server is running",
                          default='localhost')
    db_group.add_argument('--port', dest='port',
                          help="port of the host where the database server is running",
                          default='3306')

    # Command arguments
    parser.add_argument('command',
                        help="command to run. i.e: config, orgs, load")
    parser.add_argument('cmd_args', nargs=argparse.REMAINDER)

    # Set default values
    parser.set_defaults(**defaults)

    return parser


def create_config_arguments_parser():
    parser = argparse.ArgumentParser(usage=SORTINGHAT_USAGE_MSG,
                                     add_help=False)

    parser.add_argument('-c', '--config', dest='config_file',
                        help="set configuration file")

    # Set default values
    defaults = {'config_file' : os.path.expanduser('~/.sortinghat'),}

    parser.set_defaults(**defaults)

    return parser


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print "\n\nReceived Ctrl-C or other break signal. Exiting."
        sys.exit(0)
    except RuntimeError, e:
        print "Error: %s" % str(e)
        sys.exit(1)
