#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2014-2015 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#     Santiago Due√±as <sduenas@bitergia.com>
#

import argparse
import sys

from sqlalchemy import create_engine
from sqlalchemy.engine.url import URL
from sqlalchemy.exc import OperationalError
from sqlalchemy.schema import MetaData
from sqlalchemy.orm import mapper, sessionmaker
from sqlalchemy.pool import NullPool

from sortinghat.exceptions import DatabaseError


MG2SH_USAGE_MSG = \
"""%(prog)s [--help] [-u <user>] [-p <password>]
             [--host <host>] [--port <port>] [-d <name>]
             [-o <output>]"""

MG2SH_DESC_MSG = \
"""Export identities information from Metrics Grimoire databases to
sortinghat JSON format.

General options:
  -h, --help            show this help message and exit
  -u USER, --user USER  database user name
  -p PASSWORD, --password PASSWORD
                        database user password
  -d DATABASE, --database DATABASE
                        name of the Metrics Grimoire database
  --host HOST           name of the host where the database server is running
  --port PORT           port of the host where the database server is running
  -o FILE, --output FILE
                        output file
"""


class MappedIdentity(object):
    """Generic identity to map identities data from Metrics Grimoire databases"""

    IDENTITIES_TABLES = ['people', 'users', 'irclog']

    COLUMN_PREFIX = '_'

    NAME_KEYS = ['_name']
    EMAIL_KEYS = ['_email', '_email_address']
    USERNAME_KEYS = ['_username', '_user_id', '_nick']

    @property
    def name(self):
        return self.__map_to_attr(self.NAME_KEYS)

    @property
    def email(self):
        return self.__map_to_attr(self.EMAIL_KEYS)

    @property
    def username(self):
        return self.__map_to_attr(self.USERNAME_KEYS)

    def to_dict(self):
        return {'name' : self.name,
                'email' : self.email,
                'username' : self.username}

    def __map_to_attr(self, m):
        for k in m:
            try:
                return self.__getattribute__(k)
            except:
                pass
        return None


def main():
    """Export identities information from Metrics Grimoire databases"""

    args = parse_args()

    try:
        identities = fetch_identities(args.user, args.password,
                                      args.database,
                                      args.host, args.port)
    except DatabaseError, e:
        raise RuntimeError(str(e))

    json = to_json(identities, args.database)

    try:
        args.outfile.write(json)
        args.outfile.write('\n')
    except IOError, e:
        raise RuntimeError(str(e))


def parse_args():
    """Parse arguments from the command line"""

    parser = argparse.ArgumentParser(description=MG2SH_DESC_MSG,
                                     usage=MG2SH_USAGE_MSG,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     add_help=False)

    parser.add_argument('-h', '--help', action='help',
                        help=argparse.SUPPRESS)
    parser.add_argument('-u', '--user', dest='user', default='root',
                        help=argparse.SUPPRESS)
    parser.add_argument('-p', '--password', dest='password', default='',
                        help=argparse.SUPPRESS)
    parser.add_argument('-d', '--database', dest='database', required=True,
                        help=argparse.SUPPRESS)
    parser.add_argument('--host', dest='host', default='localhost',
                        help=argparse.SUPPRESS)
    parser.add_argument('--port', dest='port', default='3306',
                        help=argparse.SUPPRESS)
    parser.add_argument('-o', '--outfile', nargs='?', type=argparse.FileType('w'),
                        default=sys.stdout,
                        help=argparse.SUPPRESS)

    return parser.parse_args()


def fetch_identities(user, password, database, host, port):
    """Retrieve identities from a database"""

    engine = create_database_engine(user, password, database,
                                    host, port)
    session = create_database_session(engine)
    table = reflect_identities_table(engine)

    query = session.query(MappedIdentity)

    # Specific case for IRC databases
    if 'nick' in table.columns:
        query = query.group_by(MappedIdentity._nick)

    identities = query.all()

    close_database_session(session)

    return identities


def to_json(identities, source):
    """Convert identities to sortinghat JSON format"""

    import datetime
    import json

    ids = [identity.to_dict() for identity in identities]

    obj = {'time' : str(datetime.datetime.now()),
           'source' : source,
           'identities' : ids}

    return json.dumps(obj, indent=4, sort_keys=True)


def create_database_engine(user, password, database, host, port):
    """Create a database engine"""

    url = URL('mysql', user, password, host, port, database,
              query={'charset' : 'utf8'})
    return create_engine(url, poolclass=NullPool, echo=False)


def create_database_session(engine):
    """Connect to the database"""

    try:
        Session = sessionmaker(bind=engine)
        return Session()
    except OperationalError, e:
        raise DatabaseError(error=e.orig[1], code=e.orig[0])


def close_database_session(session):
    """Close connection with the database"""

    try:
        session.close()
    except OperationalError, e:
        raise DatabaseError(error=e.orig[1], code=e.orig[0])


def reflect_identities_table(engine):
    """Inspect and reflect identity objects"""

    try:
        meta = MetaData()
        meta.reflect(bind=engine)
    except OperationalError, e:
        raise DatabaseError(error=e.orig[1], code=e.orig[0])

    # Try to reflect from any of the supported tables
    table = None

    for tb in MappedIdentity.IDENTITIES_TABLES:
        if tb in meta.tables:
            table = meta.tables[tb]
            break

    if table is None:
        raise DatabaseError(error="Invalid schema. Identities table not found",
                            code="-1")

    # Map table schema into generic identity object
    mapper(MappedIdentity, table,
           column_prefix=MappedIdentity.COLUMN_PREFIX)

    return table


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        s = "\n\nReceived Ctrl-C or other break signal. Exiting.\n"
        sys.stdout.write(s)
        sys.exit(0)
    except RuntimeError, e:
        s = "Error: %s\n" % str(e)
        sys.stderr.write(s)
        sys.exit(1)
